name: Go

on:
  push:
   branches:
     - '*'
  pull_request:

jobs:
  golangci:

    name: Test with go ${{ matrix.go_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    environment:
      name: golangci

    strategy:
      matrix:
        go_version: [1.23]
        os: [ubuntu-latest]

    steps:
      - name: Set up Go ${{ matrix.go_version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go_version }}
        id: go

      - name: Check out code into Go module directory
        uses: actions/checkout@v4

      - name: Run unit test and get test coverage
        run: |
          go test -v ./...

      - name: Build source code for host platform
        run: |
          go build -v -ldflags="-s -w" cmd/main.go

  # test:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Unit Tests
  #       run: go test

  build-and-push-develop:
    runs-on: ubuntu-latest
    needs: golangci
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Check out code into Go module directory
        uses: actions/checkout@v4

      - name: Extract Version
        id: version_step
        run: |
          echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v*"}"
          echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"
          echo "version=$(git describe --tags --always --match='v*' main)" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Print Version
        run: |
          echo ${{steps.version_step.outputs.version_tag}}
          echo ${{steps.version_step.outputs.latest_tag}}
          echo ${{steps.version_step.outputs.version}}
          echo ${{steps.version_step.outputs.sha_short}}

      - name: PrepareReg Names
        id: read-docker-image-identifiers
        run: |
          echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo LATEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo SHA_SHORT=$(echo ${{ steps.version_step.outputs.sha_short }}) >> $GITHUB_ENV
          echo VERSION=$(echo ${{ steps.version_step.outputs.version }}-${{ steps.version_step.outputs.sha_short }} ) >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the docker image
        id: build-docker-image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/go-github-action-ci:${{ env.SHA_SHORT }} --build-arg VERSION=${{ env.VERSION }} .
          docker images